# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddInGoodsListInput {
  goodsId: Int!
  quantity: Float!
  receptionId: Int!
}

type AnalyzesResearch {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  data: String
  id: Int!
  pet: Pet
  petId: Int
  type: TypeAnalyzesResearch
  typeId: Int
}

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

input BetweenDateInput {
  dateEnd: DateTime!
  dateStart: DateTime!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

type Client {
  address: String

  """Client full name."""
  fullName: String!
  id: Int!
  pets: [Pet!]
  telephoneNumber: String!
}

type ClientConnection {
  nodes: [Client!]!
  totalCount: Int!
}

input ClientOrder {
  direction: OrderDirection!
  field: ClientOrderField!
}

"""Properties by which client connections can be ordered."""
enum ClientOrderField {
  address
  createdAt
  fullName
  id
  telephoneNumber
}

type CountOutput {
  count: Int!
}

input CreateAnalyzesResearchInput {
  data: String
  petId: Int!
  typeId: Int!
}

input CreateClientInput {
  address: String
  fullName: String!
  telephoneNumber: String!
}

input CreateGoodsCategoryInput {
  categoryName: String!
}

input CreateGoodsInput {
  categoryId: Int!
  measure: String!
  name: String!
  price: Float!
  quantity: Float!
}

input CreatePetInput {
  DOB: DateTime
  alias: String!
  breed: String
  castration: Boolean
  clientId: Int!
  color: String
  diagnosis: String
  gender: Boolean
  kind: String
  notes: String
  nutrition: String
  weight: Float
}

input CreateReceptionInput {
  anamnesis: String
  assignment: String
  clinicalSigns: String
  cost: Float
  diagnosis: String
  discount: Int
  employeeId: Int!
  goodsListReceptionInput: [GoodsListReceptionInput!]
  petId: Int!
  purposeId: Int!
  serviceListReceptionInput: [ServiceListReceptionInput!]
}

input CreateReceptionRecordInput {
  clientId: Int
  dateTimeEnd: DateTime!
  dateTimeStart: DateTime!
  employeeId: Int
  kindOfAnimal: String
  receptionPurposeId: Int
}

input CreateServiceInput {
  name: String!
  price: Float!
  typeId: Int!
}

input CreateServiceTypeInput {
  typeName: String!
}

input CreateWorkScheduleInput {
  dateWorkStart: DateTime!
  employeeId: Int!

  """Количество дней для создания графика."""
  workDays: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
Properties by which select need department for write warehouse and registry data.
"""
enum Department {
  Angarsk
  Usolye
}

type Employee {
  fullName: String!
  id: Int
  receptions: [Reception!]
  role: Role
}

type Goods {
  GoodsList: [GoodsList!]
  category: GoodsCategory!
  categoryId: Int
  department: Department
  id: Int!
  measure: String
  name: String!
  price: Float
  quantity: Float
}

type GoodsCategory {
  categoryName: String
  goods: [Goods!]
  id: Int
}

type GoodsList {
  Goods: Goods
  Reception: Reception
  goods: Goods!
  goodsId: Int
  quantity: Float!
  receptionId: String
}

input GoodsListReceptionInput {
  goodsId: Int!
  quantity: Float!
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  login: String!
  password: String!
}

type Mutation {
  addInGoodsList(data: AddInGoodsListInput!): GoodsList!
  addInServiceList(data: CreateServiceTypeInput!): ServiceType!
  changePassword(data: ChangePasswordInput!): User!
  createAnalyzesResearch(data: CreateAnalyzesResearchInput!): AnalyzesResearch!
  createClient(data: CreateClientInput!): Client!
  createGoods(data: CreateGoodsInput!): Goods!
  createGoodsCategory(data: CreateGoodsCategoryInput!): GoodsCategory!
  createPet(data: CreatePetInput!): Pet!
  createReception(data: CreateReceptionInput!): Reception!
  createReceptionRecord(data: CreateReceptionRecordInput!): ReceptionRecord!
  createService(data: CreateServiceInput!): Service!
  createWorkSchedule(data: CreateWorkScheduleInput!): [WorkSchedule!]!
  deleteClient(clientId: Int!): Client!
  deleteGoods(goodsId: Int!): Goods!
  deletePet(petId: Int!): Pet!
  deleteReceptionRecord(receptionRecordId: Int!): ReceptionRecord!
  deleteResearch(analyzesResearchId: Int!): AnalyzesResearch!
  deleteService(serviceId: Int!): Service!
  deleteWorkScheduleAllEmployeeById(employeeId: Int!): CountOutput!
  deleteWorkScheduleById(workScheduleId: Int!): WorkSchedule!
  login(data: LoginInput!): Auth!
  refreshToken(token: JWT!): Token!
  updateAnalyzesResearch(analyzesResearchId: Int!, data: UpdateAnalyzesResearchInput!): AnalyzesResearch!
  updateClient(clientId: Int!, data: UpdateClientInput!): Client!
  updateDateReceptionRecord(data: BetweenDateInput!, receptionRecordId: Int!): ReceptionRecord!
  updateGoods(data: UpdateGoodsInput!, goodsId: Int!): Goods!
  updatePet(data: UpdatePetInput!, petId: Int!): Pet!
  updateReception(data: UpdateReceptionInput!, receptionId: Int!): Reception!
  updateReceptionRecord(data: UpdateReceptionRecordInput!, receptionRecordId: Int!): ReceptionRecord!
  updateService(data: UpdateServiceInput!, serviceId: Int!): Service!
  updateUser(data: UpdateUserInput!): User!
  updateWorkSchedule(data: UpdateWorkScheduleInput!, workScheduleId: Int!): WorkSchedule!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type Pet {
  DOB: String
  alias: String!
  analyzesResearchs: [AnalyzesResearch!]
  breed: String
  castration: Boolean
  client: Client
  clientId: Int
  color: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime
  diagnosis: String
  gender: Boolean
  id: Int!
  kind: String
  notes: String
  nutrition: String
  receptions: [Reception!]
  weight: Float
}

type Query {
  allEmployees: [Employee!]!
  allGoods: [Goods!]!
  allGoodsCategory: [GoodsCategory!]!
  allGoodsList: [GoodsList!]!
  allReceptionPurpose: [ReceptionPurpose!]!
  allServiceList: [ServiceList!]!
  allServiceType: [ServiceType!]!
  allServices: [Service!]!
  allTypeAnalyzesResearch: [TypeAnalyzesResearch!]!
  analyzesResearch(analyzesResearchId: Int!): AnalyzesResearch!
  clientDetail(clientId: Int!): Client!
  clientsWithSearch(search: String): [Client!]!
  getSurgeryList: [Service!]!
  getWorkScheduleById(workScheduleId: Int!): WorkSchedule!
  getWorkSchedulesBetweenDate(data: BetweenDateInput!): [WorkSchedule!]!
  hello(name: String!): String!
  helloWorld: String!
  me: User!
  pet(petId: Int!): Pet!
  reception(receptionId: Int!): Reception!
  receptionRecord(receptionRecordId: Int!): ReceptionRecord!
  receptionRecordBetweenDate(data: BetweenDateInput!): [ReceptionRecord!]!
  resetIndexes: String!
  searchClients(after: Int, before: Int, first: Int, last: Int, orderBy: ClientOrder, search: String, skip: Int): ClientConnection!
}

type Reception {
  """Анамнез"""
  anamnesis: String

  """Лист назначения"""
  assignment: String

  """Клинические признаки"""
  clinicalSigns: String

  """Посчитанная стоимость приема по усулгам и товарам"""
  cost: Float

  """Identifies the date and time when the object was created."""
  createdAt: DateTime

  """Диагноз"""
  diagnosis: String

  """Скидка на прием"""
  discount: Int
  employee: Employee
  employeeId: Int
  goods: [GoodsList]
  id: Int!
  pet: Pet
  petId: Int
  purpose: ReceptionPurpose
  purposeId: Int
  services: [ServiceList]
}

type ReceptionPurpose {
  id: Int
  purposeName: String!
  receptions: [Reception!]
}

type ReceptionRecord {
  client: Client
  clientId: String

  """Дата и время конца записи"""
  dateTimeEnd: DateTime!

  """Дата и время начала записи"""
  dateTimeStart: DateTime!
  employee: Employee
  employeeId: Int
  id: Int!

  """Вид животного"""
  kindOfAnimal: String
  purpose: ReceptionPurpose
  receptionPurposeId: Int
}

"""User role"""
enum Role {
  ADMIN
  DOCTOR
  MANAGER
}

type Service {
  ServiceList: [ServiceList!]
  id: Int!
  name: String
  price: Float
  type: ServiceType
  typeId: Int
}

type ServiceList {
  Reception: Reception
  Service: Service
  quantity: Float
  receptionId: String
  service: Service!
  serviceId: Int
}

input ServiceListReceptionInput {
  quantity: Float!
  serviceId: Int!
}

type ServiceType {
  id: Int
  service: [Service!]
  typeName: String
}

type Subscription {
  clientCreated: Client!
  serviceAdded: Service!
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

type TypeAnalyzesResearch {
  analyzesResearch: [AnalyzesResearch!]
  id: Int
  typeName: String
}

input UpdateAnalyzesResearchInput {
  data: String!
}

input UpdateClientInput {
  address: String
  fullName: String!
  telephoneNumber: String!
}

input UpdateGoodsInput {
  name: String!
  price: Float!
  quantity: Float!
}

input UpdatePetInput {
  DOB: DateTime
  alias: String!
  breed: String
  castration: Boolean
  clientId: Int!
  color: String
  diagnosis: String
  gender: Boolean
  kind: String!
  notes: String
  nutrition: String
  weight: Float
}

input UpdateReceptionInput {
  anamnesis: String
  assignment: String
  clinicalSigns: String
  cost: Float
  diagnosis: String
  discount: Int
  employeeId: Int!
  goodsListReceptionInput: [GoodsListReceptionInput!]
  purposeId: Int!
  serviceListReceptionInput: [ServiceListReceptionInput!]
}

input UpdateReceptionRecordInput {
  clientId: Int
  dateTimeEnd: DateTime!
  dateTimeStart: DateTime!
  employeeId: Int
  kindOfAnimal: String
  receptionPurposeId: Int
}

input UpdateServiceInput {
  name: String!
  price: Float!
}

input UpdateUserInput {
  fullName: String
}

input UpdateWorkScheduleInput {
  date: DateTime!
  employeeId: Int!
}

type User {
  fullName: String
  id: Int!
  login: String!
  role: Role!
}

type WorkSchedule {
  """Дата рабочего дня"""
  date: DateTime!
  employee: Employee
  employeeId: Int
  id: Int!
}