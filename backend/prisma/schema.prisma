datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id       Int     @id @default(autoincrement())
  login    String  @unique
  password String
  fullName String? @unique
  role     Role
}

enum Role {
  ADMIN
  DOCTOR
  MANAGER
}

model Employee {
  id              Int               @id @default(autoincrement())
  Reception       Reception[]
  Schedule        Schedule[]
  ReceptionRecord ReceptionRecord[]

  fullName String @unique
  role     Role
}

model Client {
  id              String            @id @default(cuid())
  pet             Pet[]
  receptionRecord ReceptionRecord[]

  fullName        String
  telephoneNumber String
  address         String?
  createdAt       DateTime @default(now())

  @@unique([fullName, telephoneNumber])
}

model Pet {
  id               String             @id @default(cuid())
  client           Client             @relation(fields: [clientId], references: [id])
  clientId         String
  AnalyzesResearch AnalyzesResearch[]
  Reception        Reception[]

  alias      String @unique
  kind       String?
  gender     Boolean?
  breed      String?
  DOB        DateTime?
  nutrition  String?
  color      String?
  castration Boolean?
  notes      String?
  diagnosis  String?
  weight     Float?
  createdAt  DateTime  @default(now())
}

model AnalyzesResearch {
  id                   String               @id @default(cuid())
  TypeAnalyzesResearch TypeAnalyzesResearch @relation(fields: [typeId], references: [id])
  typeId               Int
  pet                  Pet                  @relation(fields: [petId], references: [id])
  petId                String

  data      String 
  createdAt DateTime @default(now())
}

model TypeAnalyzesResearch {
  id               Int                @id @default(autoincrement())
  typeName         String @unique
  AnalyzesResearch AnalyzesResearch[]
}

model Reception {
  id          String           @id @default(cuid())
  pet         Pet              @relation(fields: [petId], references: [id])
  petId       String
  Employee    Employee         @relation(fields: [employeeId], references: [id])
  employeeId  Int
  purpose     ReceptionPurpose @relation(fields: [purposeId], references: [id])
  purposeId   Int
  goodsList   GoodsList[]
  serviceList ServiceList[]

  clinicalSigns String?
  anamnesis     String?
  diagnosis     String?
  assignment    String?
  cost          Float?
  createdAt     DateTime @default(now())
}

model ReceptionPurpose {
  id              Int               @id @default(autoincrement())
  reception       Reception[]
  receptionRecord ReceptionRecord[]

  purposeName String
}

model Goods {
  id            Int           @id @default(autoincrement())
  GoodsCategory GoodsCategory @relation(fields: [categoryId], references: [id])
  categoryId    Int
  goodsList     GoodsList[]

  name     String
  measure  String?
  quantity Float?
  price    Float?
}

model GoodsCategory {
  id           Int     @id @default(autoincrement())
  goods        Goods[]
  categoryName String
}

model GoodsList {
  Reception   Reception @relation(fields: [receptionId], references: [id])
  receptionId String
  Goods       Goods     @relation(fields: [goodsId], references: [id])
  goodsId     Int

  quantity Float

  @@id([receptionId, goodsId])
}

model Service {
  id          Int           @id @default(autoincrement())
  ServiceType ServiceType   @relation(fields: [typeId], references: [id])
  typeId      Int
  serviceList ServiceList[]

  name  String
  price Float?
}

model ServiceType {
  id       Int       @id @default(autoincrement())
  service  Service[]
  typeName String
}

model ServiceList {
  Reception   Reception @relation(fields: [receptionId], references: [id])
  receptionId String
  Service     Service   @relation(fields: [serviceId], references: [id])
  serviceId   Int

  quantity Int

  @@id([receptionId, serviceId])
}

model Schedule {
  id         String   @id @default(cuid())
  Employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  data       DateTime
  dayType    Int
}
 
model ReceptionRecord {
  id                 String            @id @default(cuid())
  Employee           Employee?         @relation(fields: [employeeId], references: [id])
  employeeId         Int?
  ReceptionPurpose   ReceptionPurpose? @relation(fields: [receptionPurposeId], references: [id])
  receptionPurposeId Int?
  Client             Client?           @relation(fields: [clientId], references: [id])
  clientId           String?

  dataTime     DateTime
  kindOfAnimal String?
}
